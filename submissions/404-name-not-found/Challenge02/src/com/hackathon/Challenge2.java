static void f(String i){K r1=new K(1,Arrays.asList('~','1','2','3','4','5','6','7','8','9','0','-','=','`','!','@','#','$','%','^','&','*','(',')','_','+')),r2=new K(2,Arrays.asList('q','w','e','r','t','y','u','i','o','p','[',']','\\','Q','W','E','R','T','Y','U','I','O','P','{','}','|')),r3=new K(3,Arrays.asList('a','s','d','f','g','h','j','k','l',';','\'','A','S','D','F','G','H','J','K','L',':','"')),r4=new K(4,Arrays.asList('z','x','c','v','b','n','m',',','.','/','Z','X','C','V','B','N','M','<','>','?'));List<Character>il=i.chars().mapToObj(c->(char)c).collect(Collectors.toList());K oc1=o(r1,il),oc2=o(r2,il),oc3=o(r3,il),oc4=o(r4,il);List<K>oOc=new LinkedList<>();oOc.add(oc1);oOc.add(oc2);oOc.add(oc3);oOc.add(oc4);Collections.sort(oOc,(o1,o2)->o1.b.size()-o2.b.size());List<K> foc=oOc.stream().filter(l->!l.b.isEmpty()).collect(Collectors.toList());K rs=foc.get(0);for(K r:foc){if(r.b.size()<rs.b.size())rs=r;else if(r.b.size()==rs.b.size()){ArrayList<Character>rbs=new ArrayList<>(new LinkedHashSet<>(rs.b)),ros=new ArrayList<>(new LinkedHashSet<>(r.b));if(ros.size()<rbs.size())rs=r;else if(ros.size()==rbs.size()){if(r.rn<rs.rn)rs=r;}}}new ArrayList<>(new LinkedHashSet<>(rs.b)).stream().forEach(System.out::print);}static K o(K kr,List<Character>i){K rw=new K(kr.rn,new ArrayList<>());for(Character kb:kr.b)rw.b.addAll(i.stream().filter(il->il.equals(kb)).collect(Collectors.toList()));return rw;}static class K implements Comparable<K>{Integer rn;List<Character> b;private K(Integer rn,List<Character>b){this.rn=rn;this.b=b;}public int compareTo(K o){return this.rn-o.rn;}}