static int c,o,l=0,m;static boolean d=false;static Map<Integer,Integer> z=new TreeMap<>();static Map<Integer,Map<Integer,Integer>> r=new TreeMap<>();static void f(String a,int h){c=h;String[] t=a.split("\n");List<String> w=new ArrayList<>();for(String e:t){w.add(e);}if(w.size()>4){w.add(w.size()-4,"");}t =w.toArray(new String[0]);m=t.length-1;for(int i=0;i<t.length;i++){String[] d=t[i].split("[|]");Map<Integer,Integer> W=new TreeMap<>();int f=t.length-i-1;for(int p=0;p<d.length;p++){String[] u=d[p].split(":");if(!u[0].equals("")){int count = Integer.parseInt(u[0]);int dest = Integer.parseInt(u[1]);W.put(dest,count);}}r.put(f,W);}q(0,1,false);}static void q(int f,int k,boolean S){Set<Integer> A=new HashSet<>();Map<Integer,Integer> B = r.get(f);if(B!=null){for(int key:B.keySet()){if(k==1?key>f:key<f){if(z.containsKey(key))z.put(key,z.get(key)+B.get(key));else z.put(key,B.get(key));o+=B.get(key);A.add(key);}}}for(int key:A)B.remove(key);if(z.containsKey(f)){o-=z.get(f);z.remove(f);}if(o!=0&&d)d=false;int n=-1,F=100;for(int l:z.keySet()){if(z.get(l)!=0&&(k==1?l>f:l<f)&&Math.abs(f-l)<F){F=Math.abs(f-l);n=l;}}if(S)l++;if(o ==0&& d){System.out.println("lonely after "+l+" stops at "+f+" floor");return;}if(o==0&&!d)d=true;if(o >=c){System.out.println("polite after "+l+" stops at "+f+" floor");return;}if(n==-1)q(f,-1*k,false);else q(n,k,true);}