enum S{P,L,O}static class I{NavigableMap<Integer,Integer>i=new TreeMap<>();public I(String s){if(!s.isEmpty()){String[] f=s.split("\\|");for(String g:f)i.put(Integer.valueOf(g.split(":")[1]),Integer.valueOf(g.split(":")[0]));}}}static class Elevator{int c;int p=1;boolean d=true;I i=new I("");Elevator(int g){c=g;}int nextFloor(int f){return (d?i.i.higherKey(f):i.i.lowerKey(f));}S check(I i,int f){if(this.i.i.containsKey(f))p-=this.i.i.remove(f);Map<Integer,Integer>in=g(i,f,0);in.keySet().forEach(k->{Integer F=this.i.i.get(k);Integer N=in.get(k);this.i.i.put(k,N+(F==null?0:F));p+=N;});in.clear();return p>c?S.P:(p==1?S.L:S.O);}Map<Integer,Integer>g(I i,int f,int c){Map<Integer,Integer>in=new HashMap<>();if(c>1)return in;if(c>0)d=!d;if(d){in=i.i.tailMap(f);if(in.isEmpty()&&this.i.i.tailMap(f).isEmpty())return g(i,f,c+1);}else{in=i.i.headMap(f);if(in.isEmpty()&&this.i.i.headMap(f).isEmpty()) return g(i,f, c+1);}return in;}}static void f(String s,int c){Scanner sc=new Scanner(s).useDelimiter("\n");List<I>i=new ArrayList<>();sc.forEachRemaining(l->i.add(new I(l)));Collections.reverse(i);if(i.size()>=4)i.add(4,new I(""));solveChallenge(i,c);}static void solveChallenge(List<I> l,int c){int f=0,s=0;Elevator e=new Elevator(c);while(true){I i=l.get(f);S t=e.check(i,f);if(t!=S.O){e(t==S.P?"polite":"lonely",s,f);return;}f=e.nextFloor(f);s++;}}static void e(String m,int s,int f){System.out.print(m+" after "+s+" stops at "+f+" floor");}